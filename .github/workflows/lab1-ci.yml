name: Lab 1 Pipeline

on:
  pull_request:
    branches:
      - trunk
      - lab1
  push:
    branches:
      - lab1

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang tools
        run: sudo apt-get update && sudo apt-get install -y clang-format clang-tidy

      - name: Cache Clang tools
        uses: actions/cache@v4
        with:
          path: /usr/lib/llvm-*
          key: ${{ runner.os }}-clang-tools
          restore-keys: |
            ${{ runner.os }}-clang-tools

      - name: Generate compile_commands.json
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cd ..

      - name: Format code with clang-format
        run: |
          find ./source ./test -name '*.cpp' -o -name '*.hpp' | xargs clang-format -i

      - name: Verify clang-format
        run: |
          if ! clang-format --dry-run --Werror $(find ./source ./test -name '*.cpp' -o -name '*.hpp'); then
            echo "Code is not properly formatted!"
            exit 1
          fi

      - name: Run clang-tidy on ./source
        run: |
          clang-tidy $(find ./source -name '*.cpp') -p build -- -std=c++17
          if [ $? -ne 0 ]; then
            echo "clang-tidy found issues"
            exit 1
          fi

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake g++ gcc make

      - name: Cache Build
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build

      - name: Build the project
        run: |
          mkdir -p build
          cd build
          cmake ..
          make

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure

      - name: Upload test results
        if: always() # Ensure results are uploaded even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/Testing/Temporary/LastTest.log